#**
  Template for the creation of RestControllers. Expectes the following variables as inputs (see template_data for more):
    targetPackagePath: String; Path of the packge the file will be used
    entitiesPackagePath: String; Path of the package of the referenced entities
    repositoriesPackagePath: String; Path of the package of the referenced repositories
    controller: ControllerModel; Model containing getMethods for the needed variables

  @author Jonas Knebel
  @version 1 Initial creation of controller.vm with basic statements based on the expected results

  @author Tom Schmanke
  @version 2 Rework of controller template based on the given data structure. This mainly includes import statemens,
  loops, less template duplication, structure of variables and indentation
*#

package ${targetPackagePath};

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import ${entitiesPackagePath};
import ${repositoriesPackagePath};

@RestController
public class ${controller.getControllerName()} {

    @Autowired ${controller.getRepositoryName()} repository;

    @GetMapping("/${controller.getURLPath()}")
    public List<${controller.getEntityName()}> GetAll(){
        return repository.findAll();
    }

    @GetMapping("/${controller.getURLPath()}/{${controller.getIdentificationVariable()}}")
    public ${controller.getEntityName()} get(@PathVariable int ${controller.getIdentificationVariable()}) {
        Optional<${controller.getEntityName()}> res = repository.find(id);
        if(res.isPresent())
            return res.get();
        return null;
    }

    @DeleteMapping("/${controller.getURLPath()}/{${controller.getIdentificationVariable()}}")
    public void delete(@PathVariable int ${controller.getIdentificationVariable()}) {
        repository.deleteById(id);
    }

    @PostMapping("/${controller.getURLPath()}")
    public ResponseEntity<${controller.getEntityName()}> Create(@RequestBody ${controller.getEntityName()} subject) {
        subject.setPasswort(passwordEncoder.encode(subject.getPasswort()));
        Benutzer savedSubject = repository.save(subject);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(savedSubject.getId()).toUri();
        return ResponseEntity.created(location).body(savedSubject);
    }

    @PutMapping("/${controller.getURLPath()}/{${controller.getIdentificationVariable()}}")
    public ResponseEntity<${controller.getEntityName()}> Update(@RequestBody ${controller.getEntityName()} subject, @PathVariable int ${controller.getIdentificationVariable()}) {
        Optional<${controller.getEntityName()}> res = repository.findById(id);
            if (!res.isPresent())
            return ResponseEntity.notFound().build();

            if (!subject.getPasswort().equals(res.get().getPasswort())) {
            subject.setPasswort(passwordEncoder.encode(subject.getPasswort()));
            }
            subject.setId(id);
            repository.save(subject);

            return ResponseEntity.noContent().build();
    }

}
