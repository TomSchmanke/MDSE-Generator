{"files":[{"filename":".\\src\\main\\java\\util\\DataConverter.java","content":["package util;","","import de.arinir.mdsd.metamodell.MDSDMetamodell.*;","import de.arinir.mdsd.metamodell.MDSDMetamodell.Class;","import template_data.*;","","import java.util.ArrayList;","import java.util.List;","","/**"," * Class to convert given MDSDMetamodell data to a more suitable datamodel for"," * our generator."," *"," * @author Laura Schmidt"," * @version 1.0 Initial implementation"," */","public class DataConverter {","","    private static final String IDENTIFICATION_VAR = \"Id\";","    private final UMLClassDiagramm mdsdDiagram;","","    public DataConverter(UMLClassDiagramm mdsdDiagram) {","        this.mdsdDiagram = mdsdDiagram;","    }","","    public DataModel convertMDSDDiagramToDataModel() {","        DataModel dataModel = new DataModel();","","        dataModel.setControllerDataModels(convertController());","        dataModel.setEntityDataModels(convertEntities());","        dataModel.setAssociationsDataModels(convertAssociations());","        dataModel.setRepositoryDataModels(convertRepositories());","","        return dataModel;","    }","","    private List<ControllerModel> convertController() {","        List<ControllerModel> controllerModels = new ArrayList<>();","        for (Class c : mdsdDiagram.getClasses()) {","            var model = new ControllerModel(c.getName(), IDENTIFICATION_VAR);","            controllerModels.add(model);","        }","        return controllerModels;","    }","","    private List<EntityModel> convertEntities() {","        List<EntityModel> entityModels = new ArrayList<>();","        for (Class cl : mdsdDiagram.getClasses()) {","            var classAttributes = convertAttributes(cl);","            var model = new EntityModel(cl.getName(), IDENTIFICATION_VAR, classAttributes);","            entityModels.add(model);","        }","        return entityModels;","    }","","    private List<AttributeModel> convertAttributes(Class cl) {","        List<AttributeModel> attributeModels = new ArrayList<>();","        for (Attribute att : cl.getAttributes()) {","            var model = new AttributeModel(att.getName(), normalizeType(att.getType()), att.getVisibility());","            attributeModels.add(model);","        }","        return attributeModels;","    }","","    private DataType normalizeType(DataType oldType) {","        var oldName = oldType.getName();","        return switch (oldName) {","            case \"string\", \"str\" -> new DataType(\"String\");","            case \"boolean\", \"bool\" -> new DataType(\"boolean\");","            case \"int\", \"num\" -> new DataType(\"int\");","            default -> oldType;","        };","    }","","    private List<AssociationsModel> convertAssociations() {","        List<AssociationsModel> associationsModels = new ArrayList<>();","        for (Assoziation a : mdsdDiagram.getAssoziations()) {","            var from = a.getFrom();","            var to = a.getTo();","            var model = new AssociationsModel(from.getReference().getName(), from.getRoleName(), from.getMultiplicity(),","                    to.getReference().getName(), to.getRoleName(), to.getMultiplicity());","            associationsModels.add(model);","        }","        return associationsModels;","    }","","    private List<RepositoryModel> convertRepositories() {","        List<RepositoryModel> repositoryModels = new ArrayList<>();","        for (Class c : mdsdDiagram.getClasses()) {","            var name = c.getName();","            var model = new RepositoryModel(name);","            repositoryModels.add(model);","        }","        return repositoryModels;","    }","}"]},{"filename":".\\src\\main\\java\\util\\FileCopier.java","content":["package util;","","import java.io.IOException;","import java.nio.file.Files;","import java.nio.file.Path;","","/**"," * Util class to move files from one place to another"," *"," * @author Laura Schmidt"," * @version 1.0 Initial implementation"," */","public class FileCopier {","    public void copyFile(String source, String target) throws IOException {","        Path targetPath = Path.of(target);","","        if (!Files.exists(targetPath)) {","            Files.copy(Path.of(source), targetPath);","        }","    }","}"]},{"filename":".\\src\\main\\java\\util\\ParameterStringBuilder.java","content":["package util;","","import java.net.URLEncoder;","import java.nio.charset.StandardCharsets;","import java.util.Map;","","/**"," * Utility class which provides a method to build URL Parameter strings for http get requests based on the java.net"," * http methods"," *"," * @author Tom Schmanke"," * @version 1.0 Initial creation"," */","public class ParameterStringBuilder {","","    public static String getParamsString(Map<String, String> params) {","        StringBuilder result = new StringBuilder();","","        for (Map.Entry<String, String> entry : params.entrySet()) {","            result.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8));","            result.append(\"=\");","            result.append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8));","            result.append(\"&\");","        }","","        String resultString = result.toString();","        return resultString.length() > 0","                ? resultString.substring(0, resultString.length() - 1)","                : resultString;","    }","}"]},{"filename":".\\src\\main\\java\\util\\Plurals.java","content":["package util;","","import simplenlgde.features.DiscourseFunction;","import simplenlgde.features.InternalFeature;","import simplenlgde.framework.NLGFactory;","import simplenlgde.lexicon.Lexicon;","import simplenlgde.phrasespec.NPPhraseSpec;","import simplenlgde.realiser.Realiser;","","/**"," * Utility functions to create the plural of a given noun."," *"," * @see <a href=\"https://github.com/sebischair/SimpleNLG-DE\">SimpleNLG-DE</a>"," *"," * @author Laura Schmidt"," * @version 1.0 Initial implementation"," */","public class Plurals {","","    private static Lexicon lexicon = Lexicon.getDefaultLexicon();","    private static NLGFactory nlgFactory = new NLGFactory(lexicon);","    private static Realiser realiser = new Realiser(lexicon);","","    private static final String[][] UMLAUT_REPLACEMENTS = {{\"Ä\", \"Ae\"}, {\"Ü\", \"Ue\"}, {\"Ö\", \"Oe\"}, {\"ä\", \"ae\"},","            {\"ü\", \"ue\"}, {\"ö\", \"oe\"}, {\"ß\", \"ss\"}};","","    public static String getPlural(String noun) {","        NPPhraseSpec pluralSentence = nlgFactory.createNounPhrase(noun);","        pluralSentence.setPlural(true);","        pluralSentence.setFeature(InternalFeature.CASE, DiscourseFunction.SUBJECT);","","        String pluralNoun = realiser.realise(pluralSentence).toString();","","        return removeUmlauts(pluralNoun);","    }","","    private static String removeUmlauts(String word) {","        for (String[] umlautReplacement : UMLAUT_REPLACEMENTS) {","            word = word.replace(umlautReplacement[0], umlautReplacement[1]);","        }","        return word;","    }","}"]},{"filename":".\\src\\main\\java\\util\\ProjectInitializer.java","content":["package util;","","import java.io.*;","import java.net.HttpURLConnection;","import java.net.URL;","import java.nio.file.Files;","import java.nio.file.Path;","import java.nio.file.Paths;","import java.nio.file.StandardCopyOption;","import java.util.HashMap;","import java.util.List;","import java.util.Map;","import java.util.zip.ZipEntry;","import java.util.zip.ZipInputStream;","","/**"," * Class which holds methods to download a pre-configured sprint-boot project as zip file from"," * <a href=\"https://start.spring.io\">start.spring.io</a> and methods to unzip the downloaded file"," *"," * @author Tom Schmanke"," * @version 1.0 Initial creation"," */","public class ProjectInitializer {","","    private static final String SPRING_INIT_BASE_URL = \"https://start.spring.io/starter.zip\";","","    public String loadGeneratedFilesFromSpringInitializer(String groupId, String artifactId, String name,","                                                          String description, String javaVersion, String bootVersion,","                                                          List<String> dependencies) throws IOException {","        URL url = new URL(SPRING_INIT_BASE_URL);","        HttpURLConnection connection = (HttpURLConnection) url.openConnection();","        connection.setRequestMethod(\"GET\");","","        Map<String, String> parameters = new HashMap<>();","        parameters.put(\"type\", \"maven-project\");","        parameters.put(\"language\", \"java\");","        parameters.put(\"bootVersion\", bootVersion);","        parameters.put(\"groupId\", groupId);","        parameters.put(\"artifactId\", artifactId);","        parameters.put(\"name\", name);","        parameters.put(\"description\", description);","        parameters.put(\"packaging\", \"jar\");","        parameters.put(\"javaVersion\", javaVersion);","        parameters.put(\"dependencies\", String.join(\",\", dependencies));","","        connection.setDoOutput(true);","        DataOutputStream out = new DataOutputStream(connection.getOutputStream());","        out.writeBytes(ParameterStringBuilder.getParamsString(parameters));","        out.flush();","        out.close();","","","        if (connection.getResponseCode() >= 300) {","            Reader streamReader = new InputStreamReader(connection.getErrorStream());","            System.out.println(streamReader.read());","        } else {","            try (InputStream in = connection.getInputStream()) {","                Path target = Paths.get(\"\", parameters.get(\"name\") + \".zip\").toAbsolutePath();","                Files.copy(in, target, StandardCopyOption.REPLACE_EXISTING);","                return parameters.get(\"name\") + \".zip\";","            }","        }","        return null;","    }","","","    public void unzipFile(String in, String target) throws IOException {","        File destDir = new File(target);","","        byte[] buffer = new byte[1024];","        ZipInputStream zis = new ZipInputStream(new FileInputStream(in));","        ZipEntry zipEntry = zis.getNextEntry();","        while (zipEntry != null) {","            File newFile = newFileFromZip(destDir, zipEntry);","            if (zipEntry.isDirectory()) {","                if (!newFile.isDirectory() && !newFile.mkdirs()) {","                    throw new IOException(\"Failed to create directory \" + newFile);","                }","            } else {","                // fix for Windows-created archives","                File parent = newFile.getParentFile();","                if (!parent.isDirectory() && !parent.mkdirs()) {","                    throw new IOException(\"Failed to create directory \" + parent);","                }","","                // write file content","                FileOutputStream fos = new FileOutputStream(newFile);","                int len;","                while ((len = zis.read(buffer)) > 0) {","                    fos.write(buffer, 0, len);","                }","                fos.close();","            }","            zipEntry = zis.getNextEntry();","        }","","        zis.closeEntry();","        zis.close();","    }","","    private File newFileFromZip(File destinationDir, ZipEntry zipEntry) throws IOException {","        File destFile = new File(destinationDir, zipEntry.getName());","","        String destDirPath = destinationDir.getCanonicalPath();","        String destFilePath = destFile.getCanonicalPath();","","        if (!destFilePath.startsWith(destDirPath + File.separator)) {","            throw new IOException(\"Entry is outside of the target dir: \" + zipEntry.getName());","        }","","        return destFile;","    }","","    public boolean newDirectoryFromPath(String destinationDir, String newDirectory) {","        File theDir = new File(destinationDir + newDirectory);","        if (!theDir.exists()){","            return theDir.mkdirs();","        }","        return false;","    }","","}"]},{"filename":".\\src\\main\\java\\util\\ProjectInitializerImpl.java","content":["package util;","","import java.io.*;","import java.net.HttpURLConnection;","import java.net.URL;","import java.nio.file.Files;","import java.nio.file.Path;","import java.nio.file.Paths;","import java.nio.file.StandardCopyOption;","import java.util.HashMap;","import java.util.List;","import java.util.Map;","import java.util.zip.ZipEntry;","import java.util.zip.ZipInputStream;","","/**"," * Class which holds methods to download a pre-configured sprint-boot project as zip file from"," * <a href=\"https://start.spring.io\">start.spring.io</a> and methods to unzip the downloaded file"," *"," * @author Tom Schmanke"," * @version 1.0 Initial creation"," */","public class ProjectInitializerImpl {","    private static final String SPRING_INIT_BASE_URL = \"https://start.spring.io/starter.zip\";","","    public String loadGeneratedFilesFromSpringInitializer(String groupId, String artifactId, String name,","                                                          String description, String javaVersion, String bootVersion,","                                                          List<String> dependencies) throws IOException {","        URL url = new URL(SPRING_INIT_BASE_URL);","        HttpURLConnection connection = (HttpURLConnection) url.openConnection();","        connection.setRequestMethod(\"GET\");","","        Map<String, String> parameters = new HashMap<>();","        parameters.put(\"type\", \"maven-project\");","        parameters.put(\"language\", \"java\");","        parameters.put(\"bootVersion\", bootVersion);","        parameters.put(\"groupId\", groupId);","        parameters.put(\"artifactId\", artifactId);","        parameters.put(\"name\", name);","        parameters.put(\"description\", description);","        parameters.put(\"packaging\", \"jar\");","        parameters.put(\"javaVersion\", javaVersion);","        parameters.put(\"dependencies\", String.join(\",\", dependencies));","","        connection.setDoOutput(true);","        DataOutputStream out = new DataOutputStream(connection.getOutputStream());","        out.writeBytes(ParameterStringBuilder.getParamsString(parameters));","        out.flush();","        out.close();","","","        if (connection.getResponseCode() >= 300) {","            Reader streamReader = new InputStreamReader(connection.getErrorStream());","            System.out.println(streamReader.read());","        } else {","            try (InputStream in = connection.getInputStream()) {","                Path target = Paths.get(\"\", parameters.get(\"name\") + \".zip\").toAbsolutePath();","                Files.copy(in, target, StandardCopyOption.REPLACE_EXISTING);","                return parameters.get(\"name\") + \".zip\";","            }","        }","        return null;","    }","","","    public void unzipFile(String in, String target) throws IOException {","        File destDir = new File(target);","","        byte[] buffer = new byte[1024];","        ZipInputStream zis = new ZipInputStream(new FileInputStream(in));","        ZipEntry zipEntry = zis.getNextEntry();","        while (zipEntry != null) {","            File newFile = newFileFromZip(destDir, zipEntry);","            if (zipEntry.isDirectory()) {","                if (!newFile.isDirectory() && !newFile.mkdirs()) {","                    throw new IOException(\"Failed to create directory \" + newFile);","                }","            } else {","                // fix for Windows-created archives","                File parent = newFile.getParentFile();","                if (!parent.isDirectory() && !parent.mkdirs()) {","                    throw new IOException(\"Failed to create directory \" + parent);","                }","","                // write file content","                FileOutputStream fos = new FileOutputStream(newFile);","                int len;","                while ((len = zis.read(buffer)) > 0) {","                    fos.write(buffer, 0, len);","                }","                fos.close();","            }","            zipEntry = zis.getNextEntry();","        }","","        zis.closeEntry();","        zis.close();","    }","","    private File newFileFromZip(File destinationDir, ZipEntry zipEntry) throws IOException {","        File destFile = new File(destinationDir, zipEntry.getName());","","        String destDirPath = destinationDir.getCanonicalPath();","        String destFilePath = destFile.getCanonicalPath();","","        if (!destFilePath.startsWith(destDirPath + File.separator)) {","            throw new IOException(\"Entry is outside of the target dir: \" + zipEntry.getName());","        }","","        return destFile;","    }","","    public boolean newDirectoryFromPath(String destinationDir, String newDirectory) {","        File theDir = new File(destinationDir + newDirectory);","        if (!theDir.exists()) {","            return theDir.mkdirs();","        }","        return false;","    }","","}",""]},{"filename":".\\src\\main\\java\\util\\TemplateResolver.java","content":["package util;","","import org.apache.velocity.VelocityContext;","import org.apache.velocity.app.VelocityEngine;","import template_data.AssociationsModel;","import template_data.ControllerModel;","import template_data.EntityModel;","import template_data.RepositoryModel;","","import java.io.FileWriter;","import java.io.IOException;","import java.io.Writer;","import java.util.*;","import java.util.stream.Stream;","","/**"," * Class which on initialization creates a velocity engine and context configured for the templates used to create the"," * necessary controllers, entities and repositories out of data given in the structure defined in the template_data"," * directory based on the .vm templates in the resources' directory."," *"," * @author Tom Schmanke"," * @version 1.0 Initial creation with generation of controller, entities and repositories based on templates"," *"," * @author Laura Schmidt"," * @version 1.1 Resolve application-properties.vm and readme.vm"," */","public class TemplateResolver {","","    private final VelocityEngine velocityEngine;","","    public TemplateResolver() {","        velocityEngine = new VelocityEngine();","        Properties velocityProperties = new Properties();","        velocityProperties.put(\"file.resource.loader.path\", \"src/main/resources/\");","        velocityEngine.init(velocityProperties);","    }","","    private void resolveTemplate(VelocityContext velocityContext, String inputTemplate, String outputFile, String targetPath) {","        try {","            Writer writer = new FileWriter(targetPath + \"/\" + outputFile);","            velocityEngine.mergeTemplate(inputTemplate, \"UTF-8\", velocityContext, writer);","            writer.flush();","            writer.close();","            System.out.println(\"Successfully generated \" + outputFile);","        } catch (IOException e) {","            System.out.println(\"Error occurred during merging of template and velocity context \" + e);","        }","    }","","    /**","     * Method generates a list of RestController .java files based on the controller-base.vm and controller-impl.vm","     * templates and the List of {@link ControllerModel} containing the necessary data","     *","     * @param controllerModels List of {@link ControllerModel} which hold the data which will be used in the generation","     * of the RestController .java files","     * @return List of names of the generated files","     */","    public List<String> createControllerFiles(List<ControllerModel> controllerModels, String targetPackagePath, String entitiesPackagePath, String repositoriesPackagePath, String targetPath) {","        for (ControllerModel controllerModel : controllerModels) {","            VelocityContext velocityContext = new VelocityContext();","            velocityContext.put(\"targetPackagePath\" , targetPackagePath);","            velocityContext.put(\"entitiesPackagePath\" , entitiesPackagePath + \".*\");","            velocityContext.put(\"repositoriesPackagePath\" , repositoriesPackagePath + \".*\");","            velocityContext.put(\"controller\", controllerModel);","","            resolveTemplate(velocityContext, \"controller_templates/controller-base.vm\", controllerModel.entityName() + \"ControllerBase.java\", targetPath);","            resolveTemplate(velocityContext, \"controller_templates/controller-impl.vm\", controllerModel.entityName() + \"ControllerImpl.java\", targetPath);","        }","        return controllerModels.stream().flatMap(controllerModel -> Stream.of(controllerModel.entityName() + \"ControllerBase.java\", controllerModel.entityName() + \"ControllerEntity.java\")).toList();","    }","","    /**","     * Method generates a list of JPA Entities .java files based on the entity-base.vm and entity-impl.vm templates and","     * the List of {@link EntityModel} containing the necessary data","     *","     * @param entityModels List of {@link EntityModel} which hold the data which will be used in the generation","     * of the JPA Entities .java files","     * @return List of names of the generated files","     */","    public List<String> createEntityFiles(List<EntityModel> entityModels, List<AssociationsModel> associationsModels, String targetPackagePath, String targetPath) {","        for (EntityModel entityModel : entityModels) {","            VelocityContext velocityContext = new VelocityContext();","            velocityContext.put(\"targetPackagePath\" , targetPackagePath);","            velocityContext.put(\"entity\", entityModel);","","            List<AssociationsModel> filteredMTOAssociationsForEntity = associationsModels.stream().filter(associationsModel -> Objects.equals(associationsModel.fkEntity(), entityModel.getEntityName())).toList();","            List<AssociationsModel> filteredOTMAssociationsForEntity = associationsModels.stream().filter(associationsModel -> Objects.equals(associationsModel.referencedEntity(), entityModel.getEntityName())).toList();","            velocityContext.put(\"mtoAssociations\", filteredMTOAssociationsForEntity);","            velocityContext.put(\"otmAssociations\", filteredOTMAssociationsForEntity);","","            resolveTemplate(velocityContext, \"entity_templates/entity-base.vm\", entityModel.entityName() + \"Base.java\", targetPath);","            resolveTemplate(velocityContext, \"entity_templates/entity-impl.vm\", entityModel.entityName() + \"Impl.java\", targetPath);","        }","        return entityModels.stream().flatMap(entityModel -> Stream.of(entityModel.entityName() + \"Base.java\", entityModel.entityName() + \"Impl.java\")).toList();","    }","","    /**","     * Method generates a list of JPA Repositories .java files based on the repository-base.vm and repository-impl.vm","     * templates and the List of {@link RepositoryModel} containing the necessary data","     *","     * @param repositoryModels List of {@link RepositoryModel} which hold the data which will be used in the generation","     * of the JPA Repositories .java files","     * @return List of names of the generated files","     */","    public List<String> createRepositoryFiles(List<RepositoryModel> repositoryModels, String targetPackagePath, String entitiesPackagePath, String targetPath) {","        for (RepositoryModel repositoryModel : repositoryModels) {","            VelocityContext velocityContext = new VelocityContext();","            velocityContext.put(\"targetPackagePath\" , targetPackagePath);","            velocityContext.put(\"entitiesPackagePath\" , entitiesPackagePath + \".*\");","            velocityContext.put(\"repository\", repositoryModel);","","            resolveTemplate(velocityContext, \"repository_templates/repository-base.vm\", repositoryModel.repositoryName() + \"RepositoryBase.java\", targetPath);","            resolveTemplate(velocityContext, \"repository_templates/repository-impl.vm\", repositoryModel.repositoryName() + \"RepositoryImpl.java\", targetPath);","        }","        return repositoryModels.stream().flatMap(repositoryModel -> Stream.of(repositoryModel.repositoryName() + \"RepositoryBase.java\", repositoryModel.repositoryName() + \"RepositoryImpl.java\")).toList();","    }","","    /**","     * Method generates a basic application.properties file.","     *","     * @param artifactId ArtifactId from maven coordinates","     * @param targetPath Path where the file will be generated","     * @return generated file name","     */","    public String createApplicationProperties(String artifactId, String targetPath) {","        VelocityContext velocityContext = new VelocityContext();","        velocityContext.put(\"artifactId\", artifactId);","","        resolveTemplate(velocityContext, \"standard_files/application-properties.vm\", \"application.properties\", targetPath);","","        return \"application.properties\";","    }","","    /**","     * Method generates a basic README.md file.","     *","     * @param artifactId ArtifactId from maven coordinates","     * @param targetPath Path where the file will be generated","     * @return generated file name","     */","    public String createReadMe(String artifactId, String targetPath) {","        VelocityContext velocityContext = new VelocityContext();","        velocityContext.put(\"artifactId\", artifactId);","","        resolveTemplate(velocityContext, \"standard_files/readme.vm\", \"README.md\", targetPath);","","        return \"README.md\";","    }","}"]},{"filename":".\\src\\main\\java\\util\\XMLConverter.java","content":["package util;","","import de.arinir.XMI2MDSDMetamodellConverter.XMI2MDSDMetamodellConverter.Converter;","import de.arinir.mdsd.metamodell.MDSDMetamodell.UMLClassDiagramm;","","import java.io.IOException;","import java.io.InputStream;","","/**"," * Helper class to convert XML file to MDSDMetamodell object."," *"," * @author Laura Schmidt"," * @version 1.0 Initial implementation"," */","public class XMLConverter {","","    /**","     * Used to process a XML file representing a UML class diagram. The file is read and","     * transformed into the MDSDMetamodell.","     *","     * @param path Path to XML file. File needs to be stored in resources directory","     * @return Parsed XML file as UMLClassDiagramm.","     * @throws IOException Thrown when path is not valid.","     */","    public UMLClassDiagramm processXMLUMLFile(String path) throws IOException {","        try (InputStream s = XMLConverter.class.getResourceAsStream(path)) {","            Converter converter = new Converter();","            return converter.convert(s);","        }","    }","}"]}]}
